// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: U_File.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nanomite.Services.Network.Grpc {

  /// <summary>Holder for reflection information generated from U_File.proto</summary>
  public static partial class UFileReflection {

    #region Descriptor
    /// <summary>File descriptor for U_File.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UFileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxVX0ZpbGUucHJvdG8SHk5hbm9taXRlLlNlcnZpY2VzLk5ldHdvcmsuR3Jw",
            "YyKOAQoGVV9GaWxlEg8KB1ZlcnNpb24YASABKAkSCgoCSWQYAiABKAkSEQoJ",
            "Q3JlYXRlZERUGAMgASgJEhIKCk1vZGlmaWVkRFQYBCABKAkSDAoETmFtZRgF",
            "IAEoCRIMCgRTaXplGAYgASgFEhMKC1RvdGFsQ2h1bmtzGAcgASgFEg8KB0Nv",
            "bnRlbnQYCCABKAxCKwoPaW8uZ3JwYy5tZXNzYWdlQhBNZXNzYWdlRGF0YVBy",
            "b3RvUAGiAgNITFdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nanomite.Services.Network.Grpc.U_File), global::Nanomite.Services.Network.Grpc.U_File.Parser, new[]{ "Version", "Id", "CreatedDT", "ModifiedDT", "Name", "Size", "TotalChunks", "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class U_File : pb::IMessage<U_File> {
    private static readonly pb::MessageParser<U_File> _parser = new pb::MessageParser<U_File>(() => new U_File());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<U_File> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nanomite.Services.Network.Grpc.UFileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U_File() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U_File(U_File other) : this() {
      version_ = other.version_;
      id_ = other.id_;
      createdDT_ = other.createdDT_;
      modifiedDT_ = other.modifiedDT_;
      name_ = other.name_;
      size_ = other.size_;
      totalChunks_ = other.totalChunks_;
      content_ = other.content_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public U_File Clone() {
      return new U_File(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedDT" field.</summary>
    public const int CreatedDTFieldNumber = 3;
    private string createdDT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedDT {
      get { return createdDT_; }
      set {
        createdDT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModifiedDT" field.</summary>
    public const int ModifiedDTFieldNumber = 4;
    private string modifiedDT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModifiedDT {
      get { return modifiedDT_; }
      set {
        modifiedDT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Size" field.</summary>
    public const int SizeFieldNumber = 6;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "TotalChunks" field.</summary>
    public const int TotalChunksFieldNumber = 7;
    private int totalChunks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalChunks {
      get { return totalChunks_; }
      set {
        totalChunks_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 8;
    private pb::ByteString content_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as U_File);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(U_File other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Id != other.Id) return false;
      if (CreatedDT != other.CreatedDT) return false;
      if (ModifiedDT != other.ModifiedDT) return false;
      if (Name != other.Name) return false;
      if (Size != other.Size) return false;
      if (TotalChunks != other.TotalChunks) return false;
      if (Content != other.Content) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CreatedDT.Length != 0) hash ^= CreatedDT.GetHashCode();
      if (ModifiedDT.Length != 0) hash ^= ModifiedDT.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (TotalChunks != 0) hash ^= TotalChunks.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Version);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
      if (CreatedDT.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CreatedDT);
      }
      if (ModifiedDT.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ModifiedDT);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Size != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Size);
      }
      if (TotalChunks != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(TotalChunks);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Content);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CreatedDT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedDT);
      }
      if (ModifiedDT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedDT);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (TotalChunks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalChunks);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(U_File other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CreatedDT.Length != 0) {
        CreatedDT = other.CreatedDT;
      }
      if (other.ModifiedDT.Length != 0) {
        ModifiedDT = other.ModifiedDT;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.TotalChunks != 0) {
        TotalChunks = other.TotalChunks;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Version = input.ReadString();
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
          case 26: {
            CreatedDT = input.ReadString();
            break;
          }
          case 34: {
            ModifiedDT = input.ReadString();
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Size = input.ReadInt32();
            break;
          }
          case 56: {
            TotalChunks = input.ReadInt32();
            break;
          }
          case 66: {
            Content = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
