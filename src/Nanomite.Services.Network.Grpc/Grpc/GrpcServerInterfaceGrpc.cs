// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GrpcServer_Interface.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Nanomite.Services.Network.Grpc {
  public static partial class GrpcServer
  {
    static readonly string __ServiceName = "Nanomite.Services.Network.Grpc.GrpcServer";

    static readonly grpc::Marshaller<global::Nanomite.Services.Network.Grpc.NetworkUser> __Marshaller_NetworkUser = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nanomite.Services.Network.Grpc.NetworkUser.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nanomite.Services.Network.Grpc.GrpcResponse> __Marshaller_GrpcResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nanomite.Services.Network.Grpc.GrpcResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nanomite.Services.Network.Grpc.Command> __Marshaller_Command = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nanomite.Services.Network.Grpc.Command.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nanomite.Services.Network.Grpc.FetchRequest> __Marshaller_FetchRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nanomite.Services.Network.Grpc.FetchRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Nanomite.Services.Network.Grpc.NetworkUser, global::Nanomite.Services.Network.Grpc.GrpcResponse> __Method_Connect = new grpc::Method<global::Nanomite.Services.Network.Grpc.NetworkUser, global::Nanomite.Services.Network.Grpc.GrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Connect",
        __Marshaller_NetworkUser,
        __Marshaller_GrpcResponse);

    static readonly grpc::Method<global::Nanomite.Services.Network.Grpc.Command, global::Nanomite.Services.Network.Grpc.Command> __Method_OpenStream = new grpc::Method<global::Nanomite.Services.Network.Grpc.Command, global::Nanomite.Services.Network.Grpc.Command>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "OpenStream",
        __Marshaller_Command,
        __Marshaller_Command);

    static readonly grpc::Method<global::Nanomite.Services.Network.Grpc.Command, global::Nanomite.Services.Network.Grpc.GrpcResponse> __Method_Execute = new grpc::Method<global::Nanomite.Services.Network.Grpc.Command, global::Nanomite.Services.Network.Grpc.GrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Execute",
        __Marshaller_Command,
        __Marshaller_GrpcResponse);

    static readonly grpc::Method<global::Nanomite.Services.Network.Grpc.FetchRequest, global::Nanomite.Services.Network.Grpc.GrpcResponse> __Method_Fetch = new grpc::Method<global::Nanomite.Services.Network.Grpc.FetchRequest, global::Nanomite.Services.Network.Grpc.GrpcResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Fetch",
        __Marshaller_FetchRequest,
        __Marshaller_GrpcResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nanomite.Services.Network.Grpc.GrpcServerInterfaceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GrpcServer</summary>
    public abstract partial class GrpcServerBase
    {
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nanomite.Services.Network.Grpc.GrpcResponse> Connect(global::Nanomite.Services.Network.Grpc.NetworkUser request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// &lt;summary>
      //// Used to open a bidirectional stream. A stream can either be used to open a permanent contection to the grpc host
      //// to receive event the client subscribes to or to open one or multiple streams to send big data content.
      //// &lt;/summary>    
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task OpenStream(grpc::IAsyncStreamReader<global::Nanomite.Services.Network.Grpc.Command> requestStream, grpc::IServerStreamWriter<global::Nanomite.Services.Network.Grpc.Command> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nanomite.Services.Network.Grpc.GrpcResponse> Execute(global::Nanomite.Services.Network.Grpc.Command request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// &lt;summary>
      //// Used to request specific data from the hosts database. 
      //// The response content is always been presented insides the GrpcReponse Any proto list.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Nanomite.Services.Network.Grpc.GrpcResponse> Fetch(global::Nanomite.Services.Network.Grpc.FetchRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GrpcServer</summary>
    public partial class GrpcServerClient : grpc::ClientBase<GrpcServerClient>
    {
      /// <summary>Creates a new client for GrpcServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GrpcServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GrpcServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GrpcServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GrpcServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GrpcServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nanomite.Services.Network.Grpc.GrpcResponse Connect(global::Nanomite.Services.Network.Grpc.NetworkUser request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Connect(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nanomite.Services.Network.Grpc.GrpcResponse Connect(global::Nanomite.Services.Network.Grpc.NetworkUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nanomite.Services.Network.Grpc.GrpcResponse> ConnectAsync(global::Nanomite.Services.Network.Grpc.NetworkUser request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ConnectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nanomite.Services.Network.Grpc.GrpcResponse> ConnectAsync(global::Nanomite.Services.Network.Grpc.NetworkUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Connect, null, options, request);
      }
      /// <summary>
      //// &lt;summary>
      //// Used to open a bidirectional stream. A stream can either be used to open a permanent contection to the grpc host
      //// to receive event the client subscribes to or to open one or multiple streams to send big data content.
      //// &lt;/summary>    
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Nanomite.Services.Network.Grpc.Command, global::Nanomite.Services.Network.Grpc.Command> OpenStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return OpenStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to open a bidirectional stream. A stream can either be used to open a permanent contection to the grpc host
      //// to receive event the client subscribes to or to open one or multiple streams to send big data content.
      //// &lt;/summary>    
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Nanomite.Services.Network.Grpc.Command, global::Nanomite.Services.Network.Grpc.Command> OpenStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_OpenStream, null, options);
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nanomite.Services.Network.Grpc.GrpcResponse Execute(global::Nanomite.Services.Network.Grpc.Command request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Execute(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nanomite.Services.Network.Grpc.GrpcResponse Execute(global::Nanomite.Services.Network.Grpc.Command request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Execute, null, options, request);
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nanomite.Services.Network.Grpc.GrpcResponse> ExecuteAsync(global::Nanomite.Services.Network.Grpc.Command request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ExecuteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to send specific commands (actions) via rpc call to the host. 
      //// The rpc call is always be responded with at least an OK.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nanomite.Services.Network.Grpc.GrpcResponse> ExecuteAsync(global::Nanomite.Services.Network.Grpc.Command request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Execute, null, options, request);
      }
      /// <summary>
      //// &lt;summary>
      //// Used to request specific data from the hosts database. 
      //// The response content is always been presented insides the GrpcReponse Any proto list.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nanomite.Services.Network.Grpc.GrpcResponse Fetch(global::Nanomite.Services.Network.Grpc.FetchRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Fetch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to request specific data from the hosts database. 
      //// The response content is always been presented insides the GrpcReponse Any proto list.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Nanomite.Services.Network.Grpc.GrpcResponse Fetch(global::Nanomite.Services.Network.Grpc.FetchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Fetch, null, options, request);
      }
      /// <summary>
      //// &lt;summary>
      //// Used to request specific data from the hosts database. 
      //// The response content is always been presented insides the GrpcReponse Any proto list.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nanomite.Services.Network.Grpc.GrpcResponse> FetchAsync(global::Nanomite.Services.Network.Grpc.FetchRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return FetchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// &lt;summary>
      //// Used to request specific data from the hosts database. 
      //// The response content is always been presented insides the GrpcReponse Any proto list.
      //// &lt;/summary>  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Nanomite.Services.Network.Grpc.GrpcResponse> FetchAsync(global::Nanomite.Services.Network.Grpc.FetchRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Fetch, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GrpcServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GrpcServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GrpcServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Connect, serviceImpl.Connect)
          .AddMethod(__Method_OpenStream, serviceImpl.OpenStream)
          .AddMethod(__Method_Execute, serviceImpl.Execute)
          .AddMethod(__Method_Fetch, serviceImpl.Fetch).Build();
    }

  }
}
#endregion
