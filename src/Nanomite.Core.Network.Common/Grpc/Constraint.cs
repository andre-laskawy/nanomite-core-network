// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Constraint.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nanomite.Core.Network.Common {

  /// <summary>Holder for reflection information generated from Constraint.proto</summary>
  public static partial class ConstraintReflection {

    #region Descriptor
    /// <summary>File descriptor for Constraint.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConstraintReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBDb25zdHJhaW50LnByb3RvEhxOYW5vbWl0ZS5Db3JlLk5ldHdvcmsuQ29t",
            "bW9uIlAKCkNvbnN0cmFpbnQSFAoMVHlwZUZ1bGxOYW1lGAEgASgJEhQKDFBy",
            "b3BlcnR5TmFtZRgCIAEoCRIWCg5Gb3JlaWduS2V5TmFtZRgDIAEoCUIrCg9p",
            "by5ncnBjLm1lc3NhZ2VCEE1lc3NhZ2VEYXRhUHJvdG9QAaICA0hMV2IGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nanomite.Core.Network.Common.Constraint), global::Nanomite.Core.Network.Common.Constraint.Parser, new[]{ "TypeFullName", "PropertyName", "ForeignKeyName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Constraint : pb::IMessage<Constraint> {
    private static readonly pb::MessageParser<Constraint> _parser = new pb::MessageParser<Constraint>(() => new Constraint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Constraint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nanomite.Core.Network.Common.ConstraintReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Constraint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Constraint(Constraint other) : this() {
      typeFullName_ = other.typeFullName_;
      propertyName_ = other.propertyName_;
      foreignKeyName_ = other.foreignKeyName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Constraint Clone() {
      return new Constraint(this);
    }

    /// <summary>Field number for the "TypeFullName" field.</summary>
    public const int TypeFullNameFieldNumber = 1;
    private string typeFullName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeFullName {
      get { return typeFullName_; }
      set {
        typeFullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PropertyName" field.</summary>
    public const int PropertyNameFieldNumber = 2;
    private string propertyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PropertyName {
      get { return propertyName_; }
      set {
        propertyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ForeignKeyName" field.</summary>
    public const int ForeignKeyNameFieldNumber = 3;
    private string foreignKeyName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ForeignKeyName {
      get { return foreignKeyName_; }
      set {
        foreignKeyName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Constraint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Constraint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeFullName != other.TypeFullName) return false;
      if (PropertyName != other.PropertyName) return false;
      if (ForeignKeyName != other.ForeignKeyName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeFullName.Length != 0) hash ^= TypeFullName.GetHashCode();
      if (PropertyName.Length != 0) hash ^= PropertyName.GetHashCode();
      if (ForeignKeyName.Length != 0) hash ^= ForeignKeyName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeFullName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeFullName);
      }
      if (PropertyName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PropertyName);
      }
      if (ForeignKeyName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ForeignKeyName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeFullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeFullName);
      }
      if (PropertyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PropertyName);
      }
      if (ForeignKeyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ForeignKeyName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Constraint other) {
      if (other == null) {
        return;
      }
      if (other.TypeFullName.Length != 0) {
        TypeFullName = other.TypeFullName;
      }
      if (other.PropertyName.Length != 0) {
        PropertyName = other.PropertyName;
      }
      if (other.ForeignKeyName.Length != 0) {
        ForeignKeyName = other.ForeignKeyName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TypeFullName = input.ReadString();
            break;
          }
          case 18: {
            PropertyName = input.ReadString();
            break;
          }
          case 26: {
            ForeignKeyName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
