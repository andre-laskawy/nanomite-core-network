// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServiceMetaData.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nanomite.Core.Network.Common {

  /// <summary>Holder for reflection information generated from ServiceMetaData.proto</summary>
  public static partial class ServiceMetaDataReflection {

    #region Descriptor
    /// <summary>File descriptor for ServiceMetaData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceMetaDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVTZXJ2aWNlTWV0YURhdGEucHJvdG8SHE5hbm9taXRlLkNvcmUuTmV0d29y",
            "ay5Db21tb24iOAoPU2VydmljZU1ldGFEYXRhEhYKDlNlcnZpY2VBZGRyZXNz",
            "GAEgASgJEg0KBVR5cGVzGAIgAygJQisKD2lvLmdycGMubWVzc2FnZUIQTWVz",
            "c2FnZURhdGFQcm90b1ABogIDSExXYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nanomite.Core.Network.Common.ServiceMetaData), global::Nanomite.Core.Network.Common.ServiceMetaData.Parser, new[]{ "ServiceAddress", "Types_" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ServiceMetaData : pb::IMessage<ServiceMetaData> {
    private static readonly pb::MessageParser<ServiceMetaData> _parser = new pb::MessageParser<ServiceMetaData>(() => new ServiceMetaData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceMetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nanomite.Core.Network.Common.ServiceMetaDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceMetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceMetaData(ServiceMetaData other) : this() {
      serviceAddress_ = other.serviceAddress_;
      types_ = other.types_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceMetaData Clone() {
      return new ServiceMetaData(this);
    }

    /// <summary>Field number for the "ServiceAddress" field.</summary>
    public const int ServiceAddressFieldNumber = 1;
    private string serviceAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceAddress {
      get { return serviceAddress_; }
      set {
        serviceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Types" field.</summary>
    public const int Types_FieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_types_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> types_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Types_ {
      get { return types_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceMetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceMetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceAddress != other.ServiceAddress) return false;
      if(!types_.Equals(other.types_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceAddress.Length != 0) hash ^= ServiceAddress.GetHashCode();
      hash ^= types_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServiceAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceAddress);
      }
      types_.WriteTo(output, _repeated_types_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceAddress);
      }
      size += types_.CalculateSize(_repeated_types_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceMetaData other) {
      if (other == null) {
        return;
      }
      if (other.ServiceAddress.Length != 0) {
        ServiceAddress = other.ServiceAddress;
      }
      types_.Add(other.types_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ServiceAddress = input.ReadString();
            break;
          }
          case 18: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
