// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetworkUser.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nanomite.Core.Network.Common {

  /// <summary>Holder for reflection information generated from NetworkUser.proto</summary>
  public static partial class NetworkUserReflection {

    #region Descriptor
    /// <summary>File descriptor for NetworkUser.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NetworkUserReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFOZXR3b3JrVXNlci5wcm90bxIcTmFub21pdGUuQ29yZS5OZXR3b3JrLkNv",
            "bW1vbiK3AQoLTmV0d29ya1VzZXISCgoCSWQYASABKAkSEQoJQ3JlYXRlZERU",
            "GAIgASgJEhIKCk1vZGlmaWVkRFQYAyABKAkSDAoETmFtZRgEIAEoCRIRCglM",
            "b2dpbk5hbWUYBSABKAkSFAoMUGFzc3dvcmRIYXNoGAYgASgJEhsKE0F1dGhl",
            "bnRpY2F0aW9uVG9rZW4YByABKAkSEAoISXNBY3RpdmUYCCABKAgSDwoHSXNB",
            "ZG1pbhgJIAEoCEIrCg9pby5ncnBjLm1lc3NhZ2VCEE1lc3NhZ2VEYXRhUHJv",
            "dG9QAaICA0hMV2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nanomite.Core.Network.Common.NetworkUser), global::Nanomite.Core.Network.Common.NetworkUser.Parser, new[]{ "Id", "CreatedDT", "ModifiedDT", "Name", "LoginName", "PasswordHash", "AuthenticationToken", "IsActive", "IsAdmin" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NetworkUser : pb::IMessage<NetworkUser> {
    private static readonly pb::MessageParser<NetworkUser> _parser = new pb::MessageParser<NetworkUser>(() => new NetworkUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nanomite.Core.Network.Common.NetworkUserReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkUser(NetworkUser other) : this() {
      id_ = other.id_;
      createdDT_ = other.createdDT_;
      modifiedDT_ = other.modifiedDT_;
      name_ = other.name_;
      loginName_ = other.loginName_;
      passwordHash_ = other.passwordHash_;
      authenticationToken_ = other.authenticationToken_;
      isActive_ = other.isActive_;
      isAdmin_ = other.isAdmin_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkUser Clone() {
      return new NetworkUser(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedDT" field.</summary>
    public const int CreatedDTFieldNumber = 2;
    private string createdDT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreatedDT {
      get { return createdDT_; }
      set {
        createdDT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ModifiedDT" field.</summary>
    public const int ModifiedDTFieldNumber = 3;
    private string modifiedDT_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModifiedDT {
      get { return modifiedDT_; }
      set {
        modifiedDT_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginName" field.</summary>
    public const int LoginNameFieldNumber = 5;
    private string loginName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginName {
      get { return loginName_; }
      set {
        loginName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PasswordHash" field.</summary>
    public const int PasswordHashFieldNumber = 6;
    private string passwordHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PasswordHash {
      get { return passwordHash_; }
      set {
        passwordHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AuthenticationToken" field.</summary>
    public const int AuthenticationTokenFieldNumber = 7;
    private string authenticationToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthenticationToken {
      get { return authenticationToken_; }
      set {
        authenticationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IsActive" field.</summary>
    public const int IsActiveFieldNumber = 8;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    /// <summary>Field number for the "IsAdmin" field.</summary>
    public const int IsAdminFieldNumber = 9;
    private bool isAdmin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdmin {
      get { return isAdmin_; }
      set {
        isAdmin_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CreatedDT != other.CreatedDT) return false;
      if (ModifiedDT != other.ModifiedDT) return false;
      if (Name != other.Name) return false;
      if (LoginName != other.LoginName) return false;
      if (PasswordHash != other.PasswordHash) return false;
      if (AuthenticationToken != other.AuthenticationToken) return false;
      if (IsActive != other.IsActive) return false;
      if (IsAdmin != other.IsAdmin) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CreatedDT.Length != 0) hash ^= CreatedDT.GetHashCode();
      if (ModifiedDT.Length != 0) hash ^= ModifiedDT.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (LoginName.Length != 0) hash ^= LoginName.GetHashCode();
      if (PasswordHash.Length != 0) hash ^= PasswordHash.GetHashCode();
      if (AuthenticationToken.Length != 0) hash ^= AuthenticationToken.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (IsAdmin != false) hash ^= IsAdmin.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CreatedDT.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CreatedDT);
      }
      if (ModifiedDT.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ModifiedDT);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (LoginName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LoginName);
      }
      if (PasswordHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PasswordHash);
      }
      if (AuthenticationToken.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AuthenticationToken);
      }
      if (IsActive != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsActive);
      }
      if (IsAdmin != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAdmin);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CreatedDT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedDT);
      }
      if (ModifiedDT.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModifiedDT);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (LoginName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginName);
      }
      if (PasswordHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PasswordHash);
      }
      if (AuthenticationToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthenticationToken);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (IsAdmin != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkUser other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CreatedDT.Length != 0) {
        CreatedDT = other.CreatedDT;
      }
      if (other.ModifiedDT.Length != 0) {
        ModifiedDT = other.ModifiedDT;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.LoginName.Length != 0) {
        LoginName = other.LoginName;
      }
      if (other.PasswordHash.Length != 0) {
        PasswordHash = other.PasswordHash;
      }
      if (other.AuthenticationToken.Length != 0) {
        AuthenticationToken = other.AuthenticationToken;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      if (other.IsAdmin != false) {
        IsAdmin = other.IsAdmin;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            CreatedDT = input.ReadString();
            break;
          }
          case 26: {
            ModifiedDT = input.ReadString();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            LoginName = input.ReadString();
            break;
          }
          case 50: {
            PasswordHash = input.ReadString();
            break;
          }
          case 58: {
            AuthenticationToken = input.ReadString();
            break;
          }
          case 64: {
            IsActive = input.ReadBool();
            break;
          }
          case 72: {
            IsAdmin = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
