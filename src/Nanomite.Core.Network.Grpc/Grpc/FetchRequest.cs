// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FetchRequest.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nanomite.Core.Network.Grpc {

  /// <summary>Holder for reflection information generated from FetchRequest.proto</summary>
  public static partial class FetchRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for FetchRequest.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FetchRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJGZXRjaFJlcXVlc3QucHJvdG8SHk5hbm9taXRlLlNlcnZpY2VzLk5ldHdv",
            "cmsuR3JwYyJWCgxGZXRjaFJlcXVlc3QSFwoPVHlwZURlc2NyaXB0aW9uGAEg",
            "ASgJEg0KBVF1ZXJ5GAIgASgJEh4KFklubGN1ZGVSZWxhdGVkRW50aXRpZXMY",
            "AyABKAhCKwoPaW8uZ3JwYy5tZXNzYWdlQhBNZXNzYWdlRGF0YVByb3RvUAGi",
            "AgNITFdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nanomite.Core.Network.Grpc.FetchRequest), global::Nanomite.Core.Network.Grpc.FetchRequest.Parser, new[]{ "TypeDescription", "Query", "InlcudeRelatedEntities" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FetchRequest : pb::IMessage<FetchRequest> {
    private static readonly pb::MessageParser<FetchRequest> _parser = new pb::MessageParser<FetchRequest>(() => new FetchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FetchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nanomite.Core.Network.Grpc.FetchRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchRequest(FetchRequest other) : this() {
      typeDescription_ = other.typeDescription_;
      query_ = other.query_;
      inlcudeRelatedEntities_ = other.inlcudeRelatedEntities_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FetchRequest Clone() {
      return new FetchRequest(this);
    }

    /// <summary>Field number for the "TypeDescription" field.</summary>
    public const int TypeDescriptionFieldNumber = 1;
    private string typeDescription_ = "";
    /// <summary>
    //// &lt;summary>
    //// The descriptor describes the specific type url of the proto.
    //// Each any proto that is wrapping another proto message has TypeUrl proto,
    //// which describes the type of the containing proto message.
    //// With this property the host can identify the database table (model) that is requested.ï»¿
    //// &lt;/summary>  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TypeDescription {
      get { return typeDescription_; }
      set {
        typeDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Query" field.</summary>
    public const int QueryFieldNumber = 2;
    private string query_ = "";
    /// <summary>
    //// &lt;summary>
    //// (Optional) A serialized query that is used to filter the result.
    //// Currently only for serialized c# linq expression. 
    //// Later we will provide a sql query interface.
    //// &lt;/summary>  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InlcudeRelatedEntities" field.</summary>
    public const int InlcudeRelatedEntitiesFieldNumber = 3;
    private bool inlcudeRelatedEntities_;
    /// <summary>
    //// &lt;summary>
    //// (Optional) Used to include all child entities of the specific type that is requested.
    //// E.g. to include all related child parts on a product.
    //// &lt;/summary>  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InlcudeRelatedEntities {
      get { return inlcudeRelatedEntities_; }
      set {
        inlcudeRelatedEntities_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FetchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FetchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeDescription != other.TypeDescription) return false;
      if (Query != other.Query) return false;
      if (InlcudeRelatedEntities != other.InlcudeRelatedEntities) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeDescription.Length != 0) hash ^= TypeDescription.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (InlcudeRelatedEntities != false) hash ^= InlcudeRelatedEntities.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeDescription.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TypeDescription);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Query);
      }
      if (InlcudeRelatedEntities != false) {
        output.WriteRawTag(24);
        output.WriteBool(InlcudeRelatedEntities);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TypeDescription);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (InlcudeRelatedEntities != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FetchRequest other) {
      if (other == null) {
        return;
      }
      if (other.TypeDescription.Length != 0) {
        TypeDescription = other.TypeDescription;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.InlcudeRelatedEntities != false) {
        InlcudeRelatedEntities = other.InlcudeRelatedEntities;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TypeDescription = input.ReadString();
            break;
          }
          case 18: {
            Query = input.ReadString();
            break;
          }
          case 24: {
            InlcudeRelatedEntities = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
